# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import com.qlisv.grpc.ocr.ocrapi_pb2 as ocrapi__pb2


class OcrapiStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.getText = channel.unary_unary(
                '/com.qlisv.grpc.ocr.Ocrapi/getText',
                request_serializer=ocrapi__pb2.ImgRequest.SerializeToString,
                response_deserializer=ocrapi__pb2.ImgResponse.FromString,
                )
        self.getImgText = channel.unary_unary(
                '/com.qlisv.grpc.ocr.Ocrapi/getImgText',
                request_serializer=ocrapi__pb2.ImgRequest.SerializeToString,
                response_deserializer=ocrapi__pb2.ImgResponse.FromString,
                )


class OcrapiServicer(object):
    """Missing associated documentation comment in .proto file."""

    def getText(self, request, context):
        """用于识别单色图片上的文字，不包含表情的图片
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getImgText(self, request, context):
        """用于识别复杂的彩色图片上的文字
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_OcrapiServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'getText': grpc.unary_unary_rpc_method_handler(
                    servicer.getText,
                    request_deserializer=ocrapi__pb2.ImgRequest.FromString,
                    response_serializer=ocrapi__pb2.ImgResponse.SerializeToString,
            ),
            'getImgText': grpc.unary_unary_rpc_method_handler(
                    servicer.getImgText,
                    request_deserializer=ocrapi__pb2.ImgRequest.FromString,
                    response_serializer=ocrapi__pb2.ImgResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'com.qlisv.grpc.ocr.Ocrapi', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Ocrapi(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def getText(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.qlisv.grpc.ocr.Ocrapi/getText',
            ocrapi__pb2.ImgRequest.SerializeToString,
            ocrapi__pb2.ImgResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getImgText(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.qlisv.grpc.ocr.Ocrapi/getImgText',
            ocrapi__pb2.ImgRequest.SerializeToString,
            ocrapi__pb2.ImgResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
